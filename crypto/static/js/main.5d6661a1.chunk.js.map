{"version":3,"sources":["api.ts","routes/Price.tsx","atoms.ts","routes/Chart.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","App.tsx","theme.ts","Container.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","Wrap","styled","ul","List","li","props","theme","textColor","isPositive","_","coinId","useQuery","fetchTickersInfo","refetchInterval","isLoading","data","num","quotes","USD","ath_price","Number","percent_change_15m","percent_change_1h","percent_change_12h","percent_change_24h","percent_change_30d","isDarkAtom","atom","key","default","isDark","useRecoilValue","endDate","Math","ceil","Date","now","startDate","fetchCoinOhlcv","state","map","price","x","String","time_close","slice","y","open","toFixed","high","low","close","type","series","name","options","mode","chart","width","height","toolbar","show","grid","yaxis","tooltip","enabled","xaxis","axisBorder","formatter","value","Container","div","Header","header","Title","h1","accentColor","Loading","MainInfo","Description","p","Tabs","Tab","isActive","BackButton","button","bgColor","navigate","useNavigate","useParams","useLocation","priceMatch","useMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","tickersData","loading","onClick","Helmet","rank","symbol","description","total_supply","max_supply","to","path","element","Chart","Price","CoinsList","Coin","Img","img","coin","id","src","toLowerCase","alt","Coins","GlobalStyle","createGlobalStyle","Router","initialIsOpen","darkTheme","lightTheme","ThemeChangeButton","children","setIsDark","useSetRecoilState","prev","queryClient","QueryClient","ReactDOM","render","StrictMode","client","App","document","getElementById"],"mappings":"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","file":"static/js/main.5d6661a1.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinOhlcv(coinId: string) {\r\n  const endDate = Math.ceil(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\r\n  ).then((response) => response.json());\r\n}\r\n\r\nexport function fetchTickersInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n","import { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { fetchTickersInfo } from \"../api\";\r\ninterface ICoin {\r\n  coinId: string;\r\n}\r\n\r\ninterface ITickersInfo {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\nconst Wrap = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst List = styled.li<{ isPositive?: boolean }>`\r\n  padding: 1em 2em;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background: rgba(0, 0, 0, 0.2);\r\n  color: ${(props) => props.theme.textColor};\r\n  border-radius: 5px;\r\n  & span {\r\n    color: ${(props) =>\r\n      props.isPositive === true\r\n        ? \"rgb(67, 134, 249)\"\r\n        : props.isPositive === false\r\n        ? \"rgb(247, 84, 103)\"\r\n        : props.theme.textColor};\r\n  }\r\n  & + li {\r\n    margin-top: 1em;\r\n  }\r\n`;\r\n\r\nconst _ = ({ coinId }: ICoin) => {\r\n  const { isLoading, data } = useQuery<ITickersInfo>(\r\n    [\"price\", coinId],\r\n    () => fetchTickersInfo(coinId),\r\n    {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  const isPositive = (num: number) => num >= 0;\r\n  return (\r\n    <>\r\n      {!isLoading ? (\r\n        <>\r\n          <Wrap>\r\n            <List>\r\n              <strong>Price</strong>\r\n              <span>${data?.quotes.USD.ath_price}</span>\r\n            </List>\r\n            <List\r\n              isPositive={isPositive(\r\n                Number(data?.quotes.USD.percent_change_15m)\r\n              )}\r\n            >\r\n              <strong>15 Minute</strong>\r\n              <span>{Number(data?.quotes.USD.percent_change_15m)}%</span>\r\n            </List>\r\n            <List\r\n              isPositive={isPositive(\r\n                Number(data?.quotes.USD.percent_change_1h)\r\n              )}\r\n            >\r\n              <strong>1 Hour</strong>\r\n              <span>{Number(data?.quotes.USD.percent_change_1h)}%</span>\r\n            </List>\r\n            <List\r\n              isPositive={isPositive(\r\n                Number(data?.quotes.USD.percent_change_12h)\r\n              )}\r\n            >\r\n              <strong>12 Hour</strong>\r\n              <span>{Number(data?.quotes.USD.percent_change_12h)}%</span>\r\n            </List>\r\n            <List\r\n              isPositive={isPositive(\r\n                Number(data?.quotes.USD.percent_change_24h)\r\n              )}\r\n            >\r\n              <strong>1 Day</strong>\r\n              <span>{Number(data?.quotes.USD.percent_change_24h)}%</span>\r\n            </List>\r\n            <List\r\n              isPositive={isPositive(\r\n                Number(data?.quotes.USD.percent_change_30d)\r\n              )}\r\n            >\r\n              <strong>1 Month</strong>\r\n              <span>{Number(data?.quotes.USD.percent_change_30d)}%</span>\r\n            </List>\r\n          </Wrap>\r\n        </>\r\n      ) : (\r\n        \"Loading...\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import { atom } from \"recoil\";\r\n\r\nexport const isDarkAtom = atom({\r\n  key: \"isDark\",\r\n  default: false,\r\n});\r\n","import { useQuery } from \"react-query\";\r\nimport { fetchCoinOhlcv } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\n\r\ninterface IHistorical {\r\n  close: string;\r\n  high: string;\r\n  low: number;\r\n  market_cap: number;\r\n  open: number;\r\n  time_close: number;\r\n  time_open: number;\r\n  volume: number;\r\n}\r\n\r\nconst _ = ({ coinId }: ChartProps) => {\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    [\"chart\", coinId],\r\n    () => fetchCoinOhlcv(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  );\r\n\r\n  const state = data?.map((price) => {\r\n    const x = String(price.time_close).slice(5, 10);\r\n    const y = [\r\n      price.open.toFixed(2),\r\n      Number(price.high).toFixed(2),\r\n      price.low.toFixed(2),\r\n      Number(price.close).toFixed(2),\r\n    ];\r\n    return { x: x, y: y };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {!isLoading ? (\r\n        <ApexChart\r\n          type=\"candlestick\"\r\n          series={[\r\n            {\r\n              name: \"Price\",\r\n              data: state,\r\n            },\r\n          ]}\r\n          options={{\r\n            theme: {\r\n              mode: isDark ? \"dark\" : \"light\",\r\n            },\r\n            chart: {\r\n              type: \"candlestick\",\r\n              width: 500,\r\n              height: 300,\r\n              toolbar: {\r\n                show: false,\r\n              },\r\n            },\r\n            grid: {\r\n              show: false,\r\n            },\r\n            yaxis: {\r\n              tooltip: {\r\n                enabled: true,\r\n              },\r\n            },\r\n            xaxis: {\r\n              axisBorder: { show: false },\r\n              type: \"datetime\",\r\n            },\r\n            tooltip: {\r\n              y: {\r\n                formatter: (value) => `$${value.toFixed(2)}`,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      ) : (\r\n        \"Loading...\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import {\r\n  Link,\r\n  Routes,\r\n  useMatch,\r\n  Route,\r\n  useLocation,\r\n  useParams,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Price from \"./Price\";\r\nimport Chart from \"./Chart\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loading = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst MainInfo = styled.div`\r\n  margin-top: 2em;\r\n  padding: 1em 2em;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  text-align: center;\r\n  background: rgba(0, 0, 0, 0.2);\r\n  border-radius: 10px;\r\n\r\n  & > div {\r\n    min-width: 12%;\r\n  }\r\n\r\n  & strong {\r\n    display: block;\r\n    text-transform: uppercase;\r\n    font-size: 10px;\r\n  }\r\n  & span {\r\n    margin-top: 1em;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin-top: 2em;\r\n  line-height: 1.6;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 2em 0;\r\n  gap: 1em;\r\n`;\r\n\r\nconst Tab = styled.div<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  & a {\r\n    padding: 1em 0;\r\n    display: block;\r\n    border-radius: 10px;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    color: ${(props) =>\r\n      props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\ninterface InfoInterface {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n  contract: string;\r\n  platform: string;\r\n  contracts: object;\r\n  parent: object;\r\n  description: string;\r\n  message: string;\r\n  open_source: boolean;\r\n  started_at: string;\r\n  development_status: string;\r\n  hardware_wallet: boolean;\r\n  proof_type: string;\r\n  org_structure: string;\r\n  hash_algorithm: string;\r\n  first_data_at: string;\r\n  last_data_at: string;\r\n}\r\n\r\ninterface PriceDataInterface {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: number;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nconst BackButton = styled.button`\r\n  position: absolute;\r\n  left: 1em;\r\n  top: 1em;\r\n  width: 30px;\r\n  height: 30px;\r\n  font-size: 24px;\r\n  background: none;\r\n  font-weight: bold;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.accentColor};\r\n  }\r\n`;\r\n\r\nconst _ = () => {\r\n  const navigate = useNavigate();\r\n  const { coinId }: any = useParams();\r\n  const { state } = useLocation();\r\n  const priceMatch = useMatch(\"/:coinId/price\");\r\n  const chartMatch = useMatch(\"/:coinId/chart\");\r\n\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoInterface>(\r\n    [\"info\", coinId],\r\n    () => fetchCoinInfo(coinId)\r\n  );\r\n  const { isLoading: tickersLoading, data: tickersData } =\r\n    useQuery<PriceDataInterface>(\r\n      [\"tickers\", coinId],\r\n      () => fetchCoinTickers(coinId),\r\n      {\r\n        refetchInterval: 5000,\r\n      }\r\n    );\r\n\r\n  const loading = infoLoading || tickersLoading;\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <BackButton onClick={() => navigate(\"/\")}>&#60;</BackButton>\r\n        <Helmet>\r\n          <title>\r\n            코인{\" \"}\r\n            {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n          </title>\r\n        </Helmet>\r\n        <Header>\r\n          <Title>\r\n            {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n          </Title>\r\n        </Header>\r\n        {loading ? (\r\n          <Loading>Loading...</Loading>\r\n        ) : (\r\n          <>\r\n            <MainInfo>\r\n              <div>\r\n                <strong>RANK:</strong>\r\n                <span>{tickersData?.rank}</span>\r\n              </div>\r\n              <div>\r\n                <strong>SYMBOL:</strong>\r\n                <span>{tickersData?.symbol}</span>\r\n              </div>\r\n              <div>\r\n                <strong>Price:</strong>\r\n                <span>{tickersData?.quotes.USD.price}</span>\r\n              </div>\r\n            </MainInfo>\r\n            <Description>{infoData?.description}</Description>\r\n            <MainInfo>\r\n              <div>\r\n                <strong>TOTAL SUPLY:</strong>\r\n                <span>{tickersData?.total_supply}</span>\r\n              </div>\r\n              <div>\r\n                <strong>MAX SUPPLY:</strong>\r\n                <span>{tickersData?.max_supply}</span>\r\n              </div>\r\n            </MainInfo>\r\n            <Tabs>\r\n              <Tab isActive={chartMatch !== null}>\r\n                <Link to=\"chart\">Chart</Link>\r\n              </Tab>\r\n              <Tab isActive={priceMatch !== null}>\r\n                <Link to=\"price\">Price</Link>\r\n              </Tab>\r\n            </Tabs>\r\n\r\n            <Routes>\r\n              <Route path={`chart`} element={<Chart coinId={coinId} />} />\r\n              <Route path={`price`} element={<Price coinId={coinId} />} />\r\n            </Routes>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoins } from \"../api\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CoinsList = styled.ul`\r\n  margin: 2em 0 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst Coin = styled.li`\r\n  margin-bottom: 15px;\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n\r\n  a {\r\n    padding: 20px;\r\n    display: flex;\r\n    transition: color 0.2s ease-in;\r\n    align-items: center;\r\n    color: ${(props) => props.theme.bgColor};\r\n  }\r\n\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\ninterface ICoin {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n}\r\n\r\nconst Loading = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  margin-right: 1em;\r\n  width: 35px;\r\n  height: 35px;\r\n`;\r\n\r\nconst _ = () => {\r\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\r\n  // const [coins, setCoins] = useState<ICoin[]>([]);\r\n  // const [loading, setLoading] = useState(true);\r\n\r\n  // useEffect(() => {\r\n  //   (async () => {\r\n  //     const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\r\n  //     const json = await response.json();\r\n  //     setCoins(json.slice(0, 100));\r\n  //     setLoading(false);\r\n  //   })();\r\n  // }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>코인</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>코인</Title>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loading>Loading...</Loading>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.slice(0, 100).map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <Link to={`/${coin.id}`} state={{ name: coin.name }}>\r\n                <Img\r\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\r\n                  alt=\"\"\r\n                />\r\n                {coin.name} &rarr;\r\n              </Link>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nconst _ = () => {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Coins />} />\r\n          <Route path=\"/:coinId/*\" element={<Coin />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import Router from \"./Router\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nconst GlobalStyle = createGlobalStyle`\r\n/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  color: ${(props) => props.theme.textColor};\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: inherit;\r\n}\r\n`;\r\nconst _ = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Router />\r\n      <ReactQueryDevtools initialIsOpen={true} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nconst darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"#f5f6fa\",\r\n  accentColor: \"#8866ee\",\r\n};\r\n\r\nconst lightTheme: DefaultTheme = {\r\n  bgColor: \"#f5f6fa\",\r\n  textColor: \"#2f3640\",\r\n  accentColor: \"#c71313\",\r\n};\r\n\r\nexport { darkTheme, lightTheme };\r\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\r\n\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\nimport { isDarkAtom } from \"./atoms\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\n\r\nconst ThemeChangeButton = styled.button`\r\n  position: absolute;\r\n  right: 2em;\r\n  top: 2em;\r\n  padding: 0.5em 1em;\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  border: 0;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.accentColor};\r\n  }\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  position: relative;\r\n  margin: 2em auto 6em;\r\n  max-width: 620px;\r\n`;\r\n\r\nconst _ = ({ children }: any) => {\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  const setIsDark = useSetRecoilState(isDarkAtom);\r\n\r\n  const toggleDark = () => setIsDark((prev) => !prev);\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\r\n        <Wrap>\r\n          <ThemeChangeButton onClick={() => toggleDark()}>\r\n            {isDark ? \"Light Theme\" : \"Dark Theme\"}\r\n          </ThemeChangeButton>\r\n          {children}\r\n        </Wrap>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default _;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport App from \"./App\";\r\nimport Container from \"./Container\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <QueryClientProvider client={queryClient}>\r\n        <Container>\r\n          <App />\r\n        </Container>\r\n      </QueryClientProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}